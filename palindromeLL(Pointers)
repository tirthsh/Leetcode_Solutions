#https://leetcode.com/problems/palindrome-linked-list/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        #this pointer will end up in the middle by the time fast pointer goes to end
        slowPointer = head
        #this pointer will skip 2, will go to end
        fastPointer = head
        
        while (fastPointer != None and fastPointer.next != None):
            slowPointer = slowPointer.next
            fastPointer = fastPointer.next.next
            
        #will make second half of the LL reverse order 
        slowPointer = self.reverseLL(slowPointer)
        fastPointer = head
        #iterate over first and second half of LL and make sure all values are same
        while (slowPointer != None):
            if (slowPointer.val != fastPointer.val):
                return False
            slowPointer = slowPointer.next
            fastPointer = fastPointer.next
        
        return True
        
    #reverses a LL
    def reverseLL(self, head):
        prev = None
        while (head != None):
            next = head.next
            head.next = prev
            prev = head
            head = next
        return prev
